{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/john/Documents/GitHub/test1/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/john/Documents/GitHub/test1/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar ethUtils = require('ethereumjs-util');\n\nvar EthCrypto = require('eth-crypto');\n\nvar web3Utils = require('web3-utils');\n\nvar relay_prefix = 'rlx:';\n\nfunction toUint256_noPrefix(int) {\n  return removeHexPrefix(ethUtils.bufferToHex(ethUtils.setLengthLeft(int, 32)));\n}\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\n\nvar zeroPad = '0000000000000000000000000000000000000000000000000000000000000000';\n\nfunction padTo64(hex) {\n  if (hex.length < 64) {\n    hex = (zeroPad + hex).slice(-64);\n  }\n\n  return hex;\n}\n\nfunction bytesToHex_noPrefix(bytes) {\n  var hex = removeHexPrefix(web3Utils.toHex(bytes));\n\n  if (hex.length % 2 != 0) {\n    hex = '0' + hex;\n  }\n\n  return hex;\n}\n\nmodule.exports = {\n  register_new_relay: function () {\n    var _register_new_relay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(relayHub, stake, delay, txFee, url, account) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return relayHub.stake(account, delay, {\n                from: account,\n                value: stake\n              });\n\n            case 2:\n              _context.next = 4;\n              return relayHub.registerRelay(txFee, url, {\n                from: account\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function register_new_relay(_x, _x2, _x3, _x4, _x5, _x6) {\n      return _register_new_relay.apply(this, arguments);\n    }\n\n    return register_new_relay;\n  }(),\n  getTransactionHash: function getTransactionHash(from, to, tx, txfee, gas_price, gas_limit, nonce, relay_hub_address, relay_address) {\n    var txhstr = bytesToHex_noPrefix(tx);\n    var dataToHash = Buffer.from(relay_prefix).toString('hex') + removeHexPrefix(from) + removeHexPrefix(to) + txhstr + toUint256_noPrefix(parseInt(txfee)) + toUint256_noPrefix(parseInt(gas_price)) + toUint256_noPrefix(parseInt(gas_limit)) + toUint256_noPrefix(parseInt(nonce)) + removeHexPrefix(relay_hub_address) + removeHexPrefix(relay_address);\n    return web3Utils.sha3('0x' + dataToHash);\n  },\n  getTransactionSignature: function () {\n    var _getTransactionSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, account, hash) {\n      var sig_, signature, sig;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return new Promise(function (resolve, reject) {\n                try {\n                  web3.eth.personal.sign(hash, account, function (err, res) {\n                    if (err) reject(err);else resolve(res);\n                  });\n                } catch (e) {\n                  reject(e);\n                }\n              });\n\n            case 3:\n              sig_ = _context2.sent;\n              _context2.next = 11;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              _context2.next = 10;\n              return new Promise(function (resolve, reject) {\n                web3.eth.sign(hash, account, function (err, res) {\n                  if (err) reject(err);else resolve(res);\n                });\n              });\n\n            case 10:\n              sig_ = _context2.sent;\n\n            case 11:\n              signature = ethUtils.fromRpcSig(sig_);\n              sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n              return _context2.abrupt(\"return\", sig);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    function getTransactionSignature(_x7, _x8, _x9) {\n      return _getTransactionSignature.apply(this, arguments);\n    }\n\n    return getTransactionSignature;\n  }(),\n  getTransactionSignatureWithKey: function getTransactionSignatureWithKey(privKey, hash) {\n    var withPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var signed;\n\n    if (withPrefix) {\n      var msg = Buffer.concat([Buffer.from('\\x19Ethereum Signed Message:\\n32'), Buffer.from(removeHexPrefix(hash), 'hex')]);\n      signed = web3Utils.sha3('0x' + msg.toString('hex'));\n    } else signed = hash;\n\n    var keyHex = '0x' + Buffer.from(privKey).toString('hex');\n    var sig_ = EthCrypto.sign(keyHex, signed);\n    var signature = ethUtils.fromRpcSig(sig_);\n    var sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n    return sig;\n  },\n  getEcRecoverMeta: function getEcRecoverMeta(message, signature) {\n    if (typeof signature === 'string') {\n      var r = this.parseHexString(signature.substr(2, 65));\n      var s = this.parseHexString(signature.substr(66, 65));\n      var v = this.parseHexString(signature.substr(130, 2));\n      signature = {\n        v: v,\n        r: r,\n        s: s\n      };\n    }\n\n    var msg = Buffer.concat([Buffer.from('\\x19Ethereum Signed Message:\\n32'), Buffer.from(removeHexPrefix(message), 'hex')]);\n    var signed = web3Utils.sha3('0x' + msg.toString('hex'));\n    var buf_signed = Buffer.from(removeHexPrefix(signed), 'hex');\n    var signer = ethUtils.bufferToHex(ethUtils.pubToAddress(ethUtils.ecrecover(buf_signed, signature.v, signature.r, signature.s)));\n    return signer;\n  },\n  parseHexString: function parseHexString(str) {\n    var result = [];\n\n    while (str.length >= 2) {\n      result.push(parseInt(str.substring(0, 2), 16));\n      str = str.substring(2, str.length);\n    }\n\n    return result;\n  },\n  removeHexPrefix: removeHexPrefix,\n  padTo64: padTo64\n};","map":{"version":3,"sources":["/Users/john/Documents/GitHub/test1/node_modules/@openzeppelin/gsn-provider/src/tabookey-gasless/utils.js"],"names":["ethUtils","require","EthCrypto","web3Utils","relay_prefix","toUint256_noPrefix","int","removeHexPrefix","bufferToHex","setLengthLeft","hex","replace","zeroPad","padTo64","length","slice","bytesToHex_noPrefix","bytes","toHex","module","exports","register_new_relay","relayHub","stake","delay","txFee","url","account","from","value","registerRelay","getTransactionHash","to","tx","txfee","gas_price","gas_limit","nonce","relay_hub_address","relay_address","txhstr","dataToHash","Buffer","toString","parseInt","sha3","getTransactionSignature","web3","hash","Promise","resolve","reject","eth","personal","sign","err","res","e","sig_","signature","fromRpcSig","sig","bytesToHex","r","s","v","getTransactionSignatureWithKey","privKey","withPrefix","signed","msg","concat","keyHex","getEcRecoverMeta","message","parseHexString","substr","buf_signed","signer","pubToAddress","ecrecover","str","result","push","substring"],"mappings":"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","sourcesContent":["const ethUtils = require('ethereumjs-util');\nconst EthCrypto = require('eth-crypto');\nconst web3Utils = require('web3-utils');\nconst relay_prefix = 'rlx:';\n\nfunction toUint256_noPrefix(int) {\n  return removeHexPrefix(ethUtils.bufferToHex(ethUtils.setLengthLeft(int, 32)));\n}\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\n\nconst zeroPad = '0000000000000000000000000000000000000000000000000000000000000000';\n\nfunction padTo64(hex) {\n  if (hex.length < 64) {\n    hex = (zeroPad + hex).slice(-64);\n  }\n  return hex;\n}\n\nfunction bytesToHex_noPrefix(bytes) {\n  let hex = removeHexPrefix(web3Utils.toHex(bytes));\n  if (hex.length % 2 != 0) {\n    hex = '0' + hex;\n  }\n  return hex;\n}\n\nmodule.exports = {\n  register_new_relay: async function(relayHub, stake, delay, txFee, url, account) {\n    await relayHub.stake(account, delay, { from: account, value: stake });\n    return await relayHub.registerRelay(txFee, url, { from: account });\n  },\n\n  getTransactionHash: function(from, to, tx, txfee, gas_price, gas_limit, nonce, relay_hub_address, relay_address) {\n    let txhstr = bytesToHex_noPrefix(tx);\n    let dataToHash =\n      Buffer.from(relay_prefix).toString('hex') +\n      removeHexPrefix(from) +\n      removeHexPrefix(to) +\n      txhstr +\n      toUint256_noPrefix(parseInt(txfee)) +\n      toUint256_noPrefix(parseInt(gas_price)) +\n      toUint256_noPrefix(parseInt(gas_limit)) +\n      toUint256_noPrefix(parseInt(nonce)) +\n      removeHexPrefix(relay_hub_address) +\n      removeHexPrefix(relay_address);\n    return web3Utils.sha3('0x' + dataToHash);\n  },\n\n  getTransactionSignature: async function(web3, account, hash) {\n    let sig_;\n    try {\n      sig_ = await new Promise((resolve, reject) => {\n        try {\n          web3.eth.personal.sign(hash, account, (err, res) => {\n            if (err) reject(err);\n            else resolve(res);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    } catch (e) {\n      sig_ = await new Promise((resolve, reject) => {\n        web3.eth.sign(hash, account, (err, res) => {\n          if (err) reject(err);\n          else resolve(res);\n        });\n      });\n    }\n\n    let signature = ethUtils.fromRpcSig(sig_);\n    let sig =\n      web3Utils.bytesToHex(signature.r) +\n      removeHexPrefix(web3Utils.bytesToHex(signature.s)) +\n      removeHexPrefix(web3Utils.toHex(signature.v));\n\n    return sig;\n  },\n\n  getTransactionSignatureWithKey: function(privKey, hash, withPrefix = true) {\n    let signed;\n    if (withPrefix) {\n      let msg = Buffer.concat([\n        Buffer.from('\\x19Ethereum Signed Message:\\n32'),\n        Buffer.from(removeHexPrefix(hash), 'hex'),\n      ]);\n      signed = web3Utils.sha3('0x' + msg.toString('hex'));\n    } else signed = hash;\n    let keyHex = '0x' + Buffer.from(privKey).toString('hex');\n    const sig_ = EthCrypto.sign(keyHex, signed);\n    let signature = ethUtils.fromRpcSig(sig_);\n    let sig =\n      web3Utils.bytesToHex(signature.r) +\n      removeHexPrefix(web3Utils.bytesToHex(signature.s)) +\n      removeHexPrefix(web3Utils.toHex(signature.v));\n    return sig;\n  },\n\n  getEcRecoverMeta: function(message, signature) {\n    if (typeof signature === 'string') {\n      let r = this.parseHexString(signature.substr(2, 65));\n      let s = this.parseHexString(signature.substr(66, 65));\n      let v = this.parseHexString(signature.substr(130, 2));\n\n      signature = {\n        v: v,\n        r: r,\n        s: s,\n      };\n    }\n    let msg = Buffer.concat([\n      Buffer.from('\\x19Ethereum Signed Message:\\n32'),\n      Buffer.from(removeHexPrefix(message), 'hex'),\n    ]);\n    let signed = web3Utils.sha3('0x' + msg.toString('hex'));\n    let buf_signed = Buffer.from(removeHexPrefix(signed), 'hex');\n    let signer = ethUtils.bufferToHex(\n      ethUtils.pubToAddress(ethUtils.ecrecover(buf_signed, signature.v, signature.r, signature.s)),\n    );\n    return signer;\n  },\n\n  parseHexString: function(str) {\n    var result = [];\n    while (str.length >= 2) {\n      result.push(parseInt(str.substring(0, 2), 16));\n\n      str = str.substring(2, str.length);\n    }\n\n    return result;\n  },\n  removeHexPrefix: removeHexPrefix,\n  padTo64: padTo64,\n};\n"]},"metadata":{},"sourceType":"script"}