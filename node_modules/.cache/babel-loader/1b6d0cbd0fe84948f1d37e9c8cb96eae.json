{"ast":null,"code":"const axios = require('axios');\n\nconst logreq = process.env.httpsendlog;\nconst logmaxlen = 120;\n\nclass HttpWrapper {\n  constructor(opts) {\n    this.provider = axios.create(Object.assign({\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, opts));\n\n    if (logreq) {\n      this.provider.interceptors.response.use(function (response) {\n        console.log('got response:', response.config.url, JSON.stringify(response.data).slice(0, logmaxlen));\n        return response;\n      }, function (error) {\n        const errData = error.response ? error.response.data : {\n          error: error.message\n        };\n        const errStr = (typeof errData === 'string' ? errData : JSON.stringify(errData)).slice(0, logmaxlen);\n        const errUrl = error.response ? error.response.config.url : error.address;\n        console.log('got response:', errUrl, 'err=', errStr);\n        return Promise.reject(error);\n      });\n    }\n  }\n\n  send(url, jsonRequestData, callback) {\n    this.sendPromise(url, jsonRequestData || {}).then(data => callback(null, data)).catch(err => callback(err, null));\n  }\n\n  sendPromise(url, jsonRequestData) {\n    if (logreq) {\n      console.log('sending request:', url, JSON.stringify(jsonRequestData || {}).slice(0, logmaxlen));\n    }\n\n    return this.provider.post(url, jsonRequestData).then(res => res.data).catch(err => Promise.reject(err.response ? err.response.data : {\n      error: err.message\n    }));\n  }\n\n}\n\nmodule.exports = HttpWrapper;","map":{"version":3,"sources":["/Users/john/Documents/GitHub/test1/node_modules/@openzeppelin/gsn-provider/src/tabookey-gasless/HttpWrapper.js"],"names":["axios","require","logreq","process","env","httpsendlog","logmaxlen","HttpWrapper","constructor","opts","provider","create","Object","assign","headers","interceptors","response","use","console","log","config","url","JSON","stringify","data","slice","error","errData","message","errStr","errUrl","address","Promise","reject","send","jsonRequestData","callback","sendPromise","then","catch","err","post","res","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA3B;AACA,MAAMC,SAAS,GAAG,GAAlB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,QAAL,GAAgBV,KAAK,CAACW,MAAN,CACdC,MAAM,CAACC,MAAP,CACE;AACEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADX,KADF,EAIEL,IAJF,CADc,CAAhB;;AASA,QAAIP,MAAJ,EAAY;AACV,WAAKQ,QAAL,CAAcK,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACE,UAASD,QAAT,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,QAAQ,CAACI,MAAT,CAAgBC,GAA7C,EAAkDC,IAAI,CAACC,SAAL,CAAeP,QAAQ,CAACQ,IAAxB,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCnB,SAAvC,CAAlD;AACA,eAAOU,QAAP;AACD,OAJH,EAKE,UAASU,KAAT,EAAgB;AACd,cAAMC,OAAO,GAAGD,KAAK,CAACV,QAAN,GAAiBU,KAAK,CAACV,QAAN,CAAeQ,IAAhC,GAAuC;AAAEE,UAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,SAAvD;AACA,cAAMC,MAAM,GAAG,CAAC,OAAOF,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCL,IAAI,CAACC,SAAL,CAAeI,OAAf,CAAzC,EAAkEF,KAAlE,CAAwE,CAAxE,EAA2EnB,SAA3E,CAAf;AACA,cAAMwB,MAAM,GAAGJ,KAAK,CAACV,QAAN,GAAiBU,KAAK,CAACV,QAAN,CAAeI,MAAf,CAAsBC,GAAvC,GAA6CK,KAAK,CAACK,OAAlE;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,MAA7B,EAAqC,MAArC,EAA6CD,MAA7C;AACA,eAAOG,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,OAXH;AAaD;AACF;;AAEDQ,EAAAA,IAAI,CAACb,GAAD,EAAMc,eAAN,EAAuBC,QAAvB,EAAiC;AACnC,SAAKC,WAAL,CAAiBhB,GAAjB,EAAsBc,eAAe,IAAI,EAAzC,EACGG,IADH,CACQd,IAAI,IAAIY,QAAQ,CAAC,IAAD,EAAOZ,IAAP,CADxB,EAEGe,KAFH,CAESC,GAAG,IAAIJ,QAAQ,CAACI,GAAD,EAAM,IAAN,CAFxB;AAGD;;AAEDH,EAAAA,WAAW,CAAChB,GAAD,EAAMc,eAAN,EAAuB;AAChC,QAAIjC,MAAJ,EAAY;AACVgB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,GAAhC,EAAqCC,IAAI,CAACC,SAAL,CAAeY,eAAe,IAAI,EAAlC,EAAsCV,KAAtC,CAA4C,CAA5C,EAA+CnB,SAA/C,CAArC;AACD;;AACD,WAAO,KAAKI,QAAL,CACJ+B,IADI,CACCpB,GADD,EACMc,eADN,EAEJG,IAFI,CAECI,GAAG,IAAIA,GAAG,CAAClB,IAFZ,EAGJe,KAHI,CAGEC,GAAG,IAAIR,OAAO,CAACC,MAAR,CAAeO,GAAG,CAACxB,QAAJ,GAAewB,GAAG,CAACxB,QAAJ,CAAaQ,IAA5B,GAAmC;AAAEE,MAAAA,KAAK,EAAEc,GAAG,CAACZ;AAAb,KAAlD,CAHT,CAAP;AAID;;AA1Ce;;AA6ClBe,MAAM,CAACC,OAAP,GAAiBrC,WAAjB","sourcesContent":["const axios = require('axios');\nconst logreq = process.env.httpsendlog;\nconst logmaxlen = 120;\n\nclass HttpWrapper {\n  constructor(opts) {\n    this.provider = axios.create(\n      Object.assign(\n        {\n          headers: { 'Content-Type': 'application/json' },\n        },\n        opts,\n      ),\n    );\n\n    if (logreq) {\n      this.provider.interceptors.response.use(\n        function(response) {\n          console.log('got response:', response.config.url, JSON.stringify(response.data).slice(0, logmaxlen));\n          return response;\n        },\n        function(error) {\n          const errData = error.response ? error.response.data : { error: error.message };\n          const errStr = (typeof errData === 'string' ? errData : JSON.stringify(errData)).slice(0, logmaxlen);\n          const errUrl = error.response ? error.response.config.url : error.address;\n          console.log('got response:', errUrl, 'err=', errStr);\n          return Promise.reject(error);\n        },\n      );\n    }\n  }\n\n  send(url, jsonRequestData, callback) {\n    this.sendPromise(url, jsonRequestData || {})\n      .then(data => callback(null, data))\n      .catch(err => callback(err, null));\n  }\n\n  sendPromise(url, jsonRequestData) {\n    if (logreq) {\n      console.log('sending request:', url, JSON.stringify(jsonRequestData || {}).slice(0, logmaxlen));\n    }\n    return this.provider\n      .post(url, jsonRequestData)\n      .then(res => res.data)\n      .catch(err => Promise.reject(err.response ? err.response.data : { error: err.message }));\n  }\n}\n\nmodule.exports = HttpWrapper;\n"]},"metadata":{},"sourceType":"script"}