{"ast":null,"code":"import { Transaction } from 'ethereumjs-tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\nexport default function signTransaction(rawTx, privateKey) {\n  // check if privateKey->address matches rawTx.from\n  var publicKey = publicKeyByPrivateKey(privateKey);\n  var address = addressByPublicKey(publicKey);\n  if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n  var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n  var tx = new Transaction(rawTx);\n  tx.sign(privateKeyBuffer);\n  var serializedTx = tx.serialize().toString('hex');\n  return serializedTx;\n}","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/eth-crypto/dist/es/sign-transaction.js"],"names":["Transaction","publicKeyByPrivateKey","toAddress","addressByPublicKey","signTransaction","rawTx","privateKey","publicKey","address","from","Error","privateKeyBuffer","Buffer","replace","tx","sign","serializedTx","serialize","toString"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,SAASC,SAAS,IAAIC,kBAAtB,QAAgD,cAAhD;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AAEvD;AACA,MAAIC,SAAS,GAAGN,qBAAqB,CAACK,UAAD,CAArC;AACA,MAAIE,OAAO,GAAGL,kBAAkB,CAACI,SAAD,CAAhC;AACA,MAAIC,OAAO,IAAIH,KAAK,CAACI,IAArB,EAA2B,MAAM,IAAIC,KAAJ,CAAU,sFAAV,CAAN;AAE3B,MAAIC,gBAAgB,GAAGC,MAAM,CAACH,IAAP,CAAYH,UAAU,CAACO,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,CAAZ,EAA8C,KAA9C,CAAvB;AAEA,MAAIC,EAAE,GAAG,IAAId,WAAJ,CAAgBK,KAAhB,CAAT;AACAS,EAAAA,EAAE,CAACC,IAAH,CAAQJ,gBAAR;AACA,MAAIK,YAAY,GAAGF,EAAE,CAACG,SAAH,GAAeC,QAAf,CAAwB,KAAxB,CAAnB;AACA,SAAOF,YAAP;AACH","sourcesContent":["import { Transaction } from 'ethereumjs-tx';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport { toAddress as addressByPublicKey } from './public-key';\n\nexport default function signTransaction(rawTx, privateKey) {\n\n    // check if privateKey->address matches rawTx.from\n    var publicKey = publicKeyByPrivateKey(privateKey);\n    var address = addressByPublicKey(publicKey);\n    if (address != rawTx.from) throw new Error('EthCrypto.signTransaction(): rawTx.from does not match the address of the privateKey');\n\n    var privateKeyBuffer = Buffer.from(privateKey.replace(/^.{2}/g, ''), 'hex');\n\n    var tx = new Transaction(rawTx);\n    tx.sign(privateKeyBuffer);\n    var serializedTx = tx.serialize().toString('hex');\n    return serializedTx;\n}"]},"metadata":{},"sourceType":"module"}