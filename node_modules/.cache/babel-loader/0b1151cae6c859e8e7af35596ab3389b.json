{"ast":null,"code":"import { ecdsaSign as secp256k1_sign } from 'secp256k1';\nimport { addLeading0x, removeLeading0x } from './util';\n/**\n * signs the given message\n * we do not use sign from eth-lib because the pure secp256k1-version is 90% faster\n * @param  {string} privateKey\n * @param  {string} hash\n * @return {string} hexString\n */\n\nexport default function sign(privateKey, hash) {\n  hash = addLeading0x(hash);\n  if (hash.length !== 66) throw new Error('EthCrypto.sign(): Can only sign hashes, given: ' + hash);\n  var sigObj = secp256k1_sign(new Uint8Array(Buffer.from(removeLeading0x(hash), 'hex')), new Uint8Array(Buffer.from(removeLeading0x(privateKey), 'hex')));\n  var recoveryId = sigObj.recid === 1 ? '1c' : '1b';\n  var newSignature = '0x' + Buffer.from(sigObj.signature).toString('hex') + recoveryId;\n  return newSignature;\n}","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/eth-crypto/dist/es/sign.js"],"names":["ecdsaSign","secp256k1_sign","addLeading0x","removeLeading0x","sign","privateKey","hash","length","Error","sigObj","Uint8Array","Buffer","from","recoveryId","recid","newSignature","signature","toString"],"mappings":"AAAA,SAASA,SAAS,IAAIC,cAAtB,QAA4C,WAA5C;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,QAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,IAAT,CAAcC,UAAd,EAA0BC,IAA1B,EAAgC;AAC3CA,EAAAA,IAAI,GAAGJ,YAAY,CAACI,IAAD,CAAnB;AACA,MAAIA,IAAI,CAACC,MAAL,KAAgB,EAApB,EAAwB,MAAM,IAAIC,KAAJ,CAAU,oDAAoDF,IAA9D,CAAN;AAExB,MAAIG,MAAM,GAAGR,cAAc,CAAC,IAAIS,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYT,eAAe,CAACG,IAAD,CAA3B,EAAmC,KAAnC,CAAf,CAAD,EAA4D,IAAII,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYT,eAAe,CAACE,UAAD,CAA3B,EAAyC,KAAzC,CAAf,CAA5D,CAA3B;AAEA,MAAIQ,UAAU,GAAGJ,MAAM,CAACK,KAAP,KAAiB,CAAjB,GAAqB,IAArB,GAA4B,IAA7C;AAEA,MAAIC,YAAY,GAAG,OAAOJ,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACO,SAAnB,EAA8BC,QAA9B,CAAuC,KAAvC,CAAP,GAAuDJ,UAA1E;AACA,SAAOE,YAAP;AACH","sourcesContent":["import { ecdsaSign as secp256k1_sign } from 'secp256k1';\nimport { addLeading0x, removeLeading0x } from './util';\n\n/**\n * signs the given message\n * we do not use sign from eth-lib because the pure secp256k1-version is 90% faster\n * @param  {string} privateKey\n * @param  {string} hash\n * @return {string} hexString\n */\nexport default function sign(privateKey, hash) {\n    hash = addLeading0x(hash);\n    if (hash.length !== 66) throw new Error('EthCrypto.sign(): Can only sign hashes, given: ' + hash);\n\n    var sigObj = secp256k1_sign(new Uint8Array(Buffer.from(removeLeading0x(hash), 'hex')), new Uint8Array(Buffer.from(removeLeading0x(privateKey), 'hex')));\n\n    var recoveryId = sigObj.recid === 1 ? '1c' : '1b';\n\n    var newSignature = '0x' + Buffer.from(sigObj.signature).toString('hex') + recoveryId;\n    return newSignature;\n}"]},"metadata":{},"sourceType":"module"}