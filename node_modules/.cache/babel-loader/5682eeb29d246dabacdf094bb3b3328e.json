{"ast":null,"code":"const GSNProvider = require('./GSNProvider.js');\n/**\n * Returns a new web3 instance backed by a GSNProvider\n * @param {*} baseWeb3 wraps the provider of this instance on a GSN one\n * @param {*} options useGSN, signKey, other RelayClient options\n */\n\n\nfunction withGSN(baseWeb3, options = {}) {\n  const gsnProvider = isGSNProvider(baseWeb3.currentProvider) ? baseWeb3.currentProvider : new GSNProvider(baseWeb3.currentProvider, options);\n  return new baseWeb3.constructor(gsnProvider);\n}\n/**\n * Modifies a web3 instance to use a GSNProvider\n * @param {*} web3 instance to modify\n * @param {*} options useGSN, signKey, other RelayClient options\n */\n\n\nfunction setGSN(web3, options = {}) {\n  if (isGSNProvider(web3.currentProvider)) return web3;\n  const gsnProvider = new GSNProvider(web3.currentProvider, options);\n  web3.setProvider(gsnProvider);\n  return web3;\n}\n\nfunction isGSNProvider(provider) {\n  return provider.isGSNProvider || provider.constructor.name === 'RelayProvider';\n}\n\nmodule.exports = {\n  setGSN,\n  withGSN,\n  isGSNProvider\n};","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/@openzeppelin/gsn-provider/src/web3.js"],"names":["GSNProvider","require","withGSN","baseWeb3","options","gsnProvider","isGSNProvider","currentProvider","constructor","setGSN","web3","setProvider","provider","name","module","exports"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,QAAMC,WAAW,GAAGC,aAAa,CAACH,QAAQ,CAACI,eAAV,CAAb,GAChBJ,QAAQ,CAACI,eADO,GAEhB,IAAIP,WAAJ,CAAgBG,QAAQ,CAACI,eAAzB,EAA0CH,OAA1C,CAFJ;AAGA,SAAO,IAAID,QAAQ,CAACK,WAAb,CAAyBH,WAAzB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASI,MAAT,CAAgBC,IAAhB,EAAsBN,OAAO,GAAG,EAAhC,EAAoC;AAClC,MAAIE,aAAa,CAACI,IAAI,CAACH,eAAN,CAAjB,EAAyC,OAAOG,IAAP;AAEzC,QAAML,WAAW,GAAG,IAAIL,WAAJ,CAAgBU,IAAI,CAACH,eAArB,EAAsCH,OAAtC,CAApB;AACAM,EAAAA,IAAI,CAACC,WAAL,CAAiBN,WAAjB;AACA,SAAOK,IAAP;AACD;;AAED,SAASJ,aAAT,CAAuBM,QAAvB,EAAiC;AAC/B,SAAOA,QAAQ,CAACN,aAAT,IAA0BM,QAAQ,CAACJ,WAAT,CAAqBK,IAArB,KAA8B,eAA/D;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfN,EAAAA,MADe;AAEfP,EAAAA,OAFe;AAGfI,EAAAA;AAHe,CAAjB","sourcesContent":["const GSNProvider = require('./GSNProvider.js');\n\n/**\n * Returns a new web3 instance backed by a GSNProvider\n * @param {*} baseWeb3 wraps the provider of this instance on a GSN one\n * @param {*} options useGSN, signKey, other RelayClient options\n */\nfunction withGSN(baseWeb3, options = {}) {\n  const gsnProvider = isGSNProvider(baseWeb3.currentProvider)\n    ? baseWeb3.currentProvider\n    : new GSNProvider(baseWeb3.currentProvider, options);\n  return new baseWeb3.constructor(gsnProvider);\n}\n\n/**\n * Modifies a web3 instance to use a GSNProvider\n * @param {*} web3 instance to modify\n * @param {*} options useGSN, signKey, other RelayClient options\n */\nfunction setGSN(web3, options = {}) {\n  if (isGSNProvider(web3.currentProvider)) return web3;\n\n  const gsnProvider = new GSNProvider(web3.currentProvider, options);\n  web3.setProvider(gsnProvider);\n  return web3;\n}\n\nfunction isGSNProvider(provider) {\n  return provider.isGSNProvider || provider.constructor.name === 'RelayProvider';\n}\n\nmodule.exports = {\n  setGSN,\n  withGSN,\n  isGSNProvider,\n};\n"]},"metadata":{},"sourceType":"script"}