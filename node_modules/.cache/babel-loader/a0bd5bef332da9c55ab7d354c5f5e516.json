{"ast":null,"code":"import { utils as ethersUtils } from 'ethers';\nexport function keccak256(params) {\n  var types = [];\n  var values = [];\n\n  if (!Array.isArray(params)) {\n    types.push('string');\n    values.push(params);\n  } else {\n    params.forEach(function (p) {\n      types.push(p.type);\n      values.push(p.value);\n    });\n  }\n\n  return ethersUtils.solidityKeccak256(types, values);\n}\nexport var SIGN_PREFIX = '\\x19Ethereum Signed Message:\\n32';","map":{"version":3,"sources":["/Users/john/Documents/GitHub/test1/node_modules/eth-crypto/dist/es/hash.js"],"names":["utils","ethersUtils","keccak256","params","types","values","Array","isArray","push","forEach","p","type","value","solidityKeccak256","SIGN_PREFIX"],"mappings":"AAAA,SAASA,KAAK,IAAIC,WAAlB,QAAqC,QAArC;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AAC9B,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAL,EAA4B;AACxBC,IAAAA,KAAK,CAACI,IAAN,CAAW,QAAX;AACAH,IAAAA,MAAM,CAACG,IAAP,CAAYL,MAAZ;AACH,GAHD,MAGO;AACHA,IAAAA,MAAM,CAACM,OAAP,CAAe,UAAUC,CAAV,EAAa;AACxBN,MAAAA,KAAK,CAACI,IAAN,CAAWE,CAAC,CAACC,IAAb;AACAN,MAAAA,MAAM,CAACG,IAAP,CAAYE,CAAC,CAACE,KAAd;AACH,KAHD;AAIH;;AACD,SAAOX,WAAW,CAACY,iBAAZ,CAA8BT,KAA9B,EAAqCC,MAArC,CAAP;AACH;AAED,OAAO,IAAIS,WAAW,GAAG,kCAAlB","sourcesContent":["import { utils as ethersUtils } from 'ethers';\n\nexport function keccak256(params) {\n    var types = [];\n    var values = [];\n    if (!Array.isArray(params)) {\n        types.push('string');\n        values.push(params);\n    } else {\n        params.forEach(function (p) {\n            types.push(p.type);\n            values.push(p.value);\n        });\n    }\n    return ethersUtils.solidityKeccak256(types, values);\n}\n\nexport var SIGN_PREFIX = '\\x19Ethereum Signed Message:\\n32';"]},"metadata":{},"sourceType":"module"}