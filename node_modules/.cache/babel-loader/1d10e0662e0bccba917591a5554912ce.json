{"ast":null,"code":"const {\n  fromPrivateKey\n} = require('ethereumjs-wallet');\n\nconst {\n  callAsJsonRpc\n} = require('./utils');\n\nconst ethUtil = require('ethereumjs-util');\n\nconst sigUtil = require('eth-sig-util');\n\nconst EthereumTx = require('ethereumjs-tx');\n\nclass PrivateKeyProvider {\n  constructor(base, privateKey) {\n    // Build ethereumjs-wallet from privateKey\n    this.wallet = this._getWalletFromPrivateKey(privateKey);\n    this.address = ethUtil.toChecksumAddress(ethUtil.bufferToHex(this.wallet.getAddress())); // Patch base provider if needed\n\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n    this.sendAsync = this.send.bind(this);\n    this.baseProvider = base;\n    this.messageId = 0;\n    this.isPrivateKeyProvider = true;\n  }\n\n  send(payload, callback) {\n    let from, data, txParams, signature;\n    const id = payload.id;\n\n    switch (payload.method) {\n      case 'eth_accounts':\n        callAsJsonRpc(this.ethAccounts.bind(this), [], id, callback);\n        break;\n\n      case 'eth_sign':\n        [from, data] = payload.params;\n        callAsJsonRpc(this.ethSign.bind(this), [from, data], id, callback);\n        break;\n\n      case 'eth_signTransaction':\n        [txParams] = payload.params;\n        callAsJsonRpc(this.ethSignTransaction.bind(this), [txParams], id, callback, signedTx => ({\n          tx: txParams,\n          raw: signedTx\n        }));\n        break;\n\n      case 'eth_signTypedData':\n        [from, data] = payload.params;\n        callAsJsonRpc(this.ethSignTypedData.bind(this), [from, data], id, callback);\n        break;\n\n      case 'eth_sendTransaction':\n        // TODO: Implement this method before releasing this as a standalone provider\n        return this.baseSend(payload, callback);\n\n      case 'personal_sign':\n        [data, from] = payload.params;\n        callAsJsonRpc(this.personalSign.bind(this), [from, data], id, callback);\n        break;\n\n      case 'personal_ecRecover':\n        [data, signature] = payload.params;\n        callAsJsonRpc(this.personalEcRecover.bind(this), [data, signature], id, callback);\n        break;\n\n      default:\n        return this.baseSend(payload, callback);\n    }\n  }\n\n  async ethAccounts() {\n    return [this.address];\n  } // Adapted from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\n\n\n  async ethSign(signer, data) {\n    this._validateSigner(signer);\n\n    if (!data) throw new Error('Data to sign cannot be null');\n    const dataBuff = ethUtil.toBuffer(data);\n    const msgHash = ethUtil.hashPersonalMessage(dataBuff);\n    const sig = ethUtil.ecsign(msgHash, this.wallet.getPrivateKey());\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  }\n\n  async ethSignTypedData(signer, data) {\n    this._validateSigner(signer);\n\n    if (!data) throw new Error('Data to sign cannot be null');\n    return sigUtil.signTypedData(this.wallet.getPrivateKey(), {\n      data\n    });\n  }\n\n  async personalSign(signer, data) {\n    this._validateSigner(signer);\n\n    if (!data) throw new Error('Data to sign cannot be null');\n    return sigUtil.personalSign(this.wallet.getPrivateKey(), {\n      data\n    });\n  }\n\n  async personalEcRecover(data, sig) {\n    if (!sig) throw new Error('Signature for ecRecover cannot be null');\n    if (!data) throw new Error('Data for ecRecover cannot be null');\n    return sigUtil.recoverPersonalSignature({\n      data,\n      sig\n    });\n  } // Adapted from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\n\n\n  async ethSignTransaction(txData) {\n    this._validateSigner(txData.from); // TODO: Fill in gas, gasPrice, and nonce if missing instead of failing\n\n\n    if (!txData.gas && !txData.gasLimit) throw new Error(`Gas limit for transaction is required (${txData})`);\n    if (!txData.gasPrice) throw new Error(`Gas price for transaction is required (${txData})`);\n    if (!txData.nonce) throw new Error(`Nonce for transaction is required (${txData})`); // Format gas, value, and data for ethereum-tx\n\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas;\n    txData.value = txData.value || '0x00';\n    txData.data = ethUtil.addHexPrefix(txData.data); // Build ethereum-tx object and sign it\n\n    const privateKey = this.wallet.getPrivateKey();\n    const tx = new EthereumTx(txData);\n    tx.sign(privateKey);\n    return ethUtil.bufferToHex(tx.serialize());\n  }\n\n  _validateSigner(signer) {\n    if (!signer) {\n      throw new Error(`Signer address is required`);\n    }\n\n    if (signer.toLowerCase() !== this.address.toLowerCase()) {\n      throw new Error(`Unknown signer ${signer} (current signer is ${this.address})`);\n    }\n  }\n\n  _getWalletFromPrivateKey(privateKey) {\n    if (!privateKey) throw new Error('Private key must be set'); // This is an ethereumjs-wallet already\n\n    if (privateKey.getPrivateKey && privateKey.getAddress) return privateKey; // This is an object that contains the private key\n\n    if (privateKey.privateKey) privateKey = privateKey.privateKey; // Transform the private key into a buffer\n\n    const keyBuffer = typeof privateKey === 'string' ? new Buffer(privateKey.replace(/^0x/, ''), 'hex') : privateKey; // Build the wallet from the key\n\n    return fromPrivateKey(keyBuffer);\n  }\n\n} // Copied from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\n\n\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r);\n  s = ethUtil.fromSigned(s);\n  v = ethUtil.bufferToInt(v);\n  r = ethUtil.toUnsigned(r).toString('hex').padStart(64, 0);\n  s = ethUtil.toUnsigned(s).toString('hex').padStart(64, 0);\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v));\n  return ethUtil.addHexPrefix(r.concat(s, v).toString('hex'));\n}\n\nmodule.exports = PrivateKeyProvider;","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/@openzeppelin/gsn-provider/src/PrivateKeyProvider.js"],"names":["fromPrivateKey","require","callAsJsonRpc","ethUtil","sigUtil","EthereumTx","PrivateKeyProvider","constructor","base","privateKey","wallet","_getWalletFromPrivateKey","address","toChecksumAddress","bufferToHex","getAddress","baseSend","sendAsync","send","bind","baseProvider","messageId","isPrivateKeyProvider","payload","callback","from","data","txParams","signature","id","method","ethAccounts","params","ethSign","ethSignTransaction","signedTx","tx","raw","ethSignTypedData","personalSign","personalEcRecover","signer","_validateSigner","Error","dataBuff","toBuffer","msgHash","hashPersonalMessage","sig","ecsign","getPrivateKey","concatSig","v","r","s","signTypedData","recoverPersonalSignature","txData","gas","gasLimit","gasPrice","nonce","undefined","value","addHexPrefix","sign","serialize","toLowerCase","keyBuffer","Buffer","replace","fromSigned","bufferToInt","toUnsigned","toString","padStart","stripHexPrefix","intToHex","concat","module","exports"],"mappings":"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","sourcesContent":["const { fromPrivateKey } = require('ethereumjs-wallet');\nconst { callAsJsonRpc } = require('./utils');\nconst ethUtil = require('ethereumjs-util');\nconst sigUtil = require('eth-sig-util');\nconst EthereumTx = require('ethereumjs-tx');\n\nclass PrivateKeyProvider {\n  constructor(base, privateKey) {\n    // Build ethereumjs-wallet from privateKey\n    this.wallet = this._getWalletFromPrivateKey(privateKey);\n    this.address = ethUtil.toChecksumAddress(ethUtil.bufferToHex(this.wallet.getAddress()));\n\n    // Patch base provider if needed\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n    this.sendAsync = this.send.bind(this);\n    this.baseProvider = base;\n\n    this.messageId = 0;\n    this.isPrivateKeyProvider = true;\n  }\n\n  send(payload, callback) {\n    let from, data, txParams, signature;\n    const id = payload.id;\n\n    switch (payload.method) {\n      case 'eth_accounts':\n        callAsJsonRpc(this.ethAccounts.bind(this), [], id, callback);\n        break;\n\n      case 'eth_sign':\n        [from, data] = payload.params;\n        callAsJsonRpc(this.ethSign.bind(this), [from, data], id, callback);\n        break;\n\n      case 'eth_signTransaction':\n        [txParams] = payload.params;\n        callAsJsonRpc(this.ethSignTransaction.bind(this), [txParams], id, callback, signedTx => ({\n          tx: txParams,\n          raw: signedTx,\n        }));\n        break;\n\n      case 'eth_signTypedData':\n        [from, data] = payload.params;\n        callAsJsonRpc(this.ethSignTypedData.bind(this), [from, data], id, callback);\n        break;\n\n      case 'eth_sendTransaction':\n        // TODO: Implement this method before releasing this as a standalone provider\n        return this.baseSend(payload, callback);\n\n      case 'personal_sign':\n        [data, from] = payload.params;\n        callAsJsonRpc(this.personalSign.bind(this), [from, data], id, callback);\n        break;\n\n      case 'personal_ecRecover':\n        [data, signature] = payload.params;\n        callAsJsonRpc(this.personalEcRecover.bind(this), [data, signature], id, callback);\n        break;\n\n      default:\n        return this.baseSend(payload, callback);\n    }\n  }\n\n  async ethAccounts() {\n    return [this.address];\n  }\n\n  // Adapted from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\n  async ethSign(signer, data) {\n    this._validateSigner(signer);\n    if (!data) throw new Error('Data to sign cannot be null');\n\n    const dataBuff = ethUtil.toBuffer(data);\n    const msgHash = ethUtil.hashPersonalMessage(dataBuff);\n    const sig = ethUtil.ecsign(msgHash, this.wallet.getPrivateKey());\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  }\n\n  async ethSignTypedData(signer, data) {\n    this._validateSigner(signer);\n    if (!data) throw new Error('Data to sign cannot be null');\n    return sigUtil.signTypedData(this.wallet.getPrivateKey(), { data });\n  }\n\n  async personalSign(signer, data) {\n    this._validateSigner(signer);\n    if (!data) throw new Error('Data to sign cannot be null');\n    return sigUtil.personalSign(this.wallet.getPrivateKey(), { data });\n  }\n\n  async personalEcRecover(data, sig) {\n    if (!sig) throw new Error('Signature for ecRecover cannot be null');\n    if (!data) throw new Error('Data for ecRecover cannot be null');\n    return sigUtil.recoverPersonalSignature({ data, sig });\n  }\n\n  // Adapted from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\n  async ethSignTransaction(txData) {\n    this._validateSigner(txData.from);\n\n    // TODO: Fill in gas, gasPrice, and nonce if missing instead of failing\n    if (!txData.gas && !txData.gasLimit) throw new Error(`Gas limit for transaction is required (${txData})`);\n    if (!txData.gasPrice) throw new Error(`Gas price for transaction is required (${txData})`);\n    if (!txData.nonce) throw new Error(`Nonce for transaction is required (${txData})`);\n\n    // Format gas, value, and data for ethereum-tx\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas;\n    txData.value = txData.value || '0x00';\n    txData.data = ethUtil.addHexPrefix(txData.data);\n\n    // Build ethereum-tx object and sign it\n    const privateKey = this.wallet.getPrivateKey();\n    const tx = new EthereumTx(txData);\n    tx.sign(privateKey);\n    return ethUtil.bufferToHex(tx.serialize());\n  }\n\n  _validateSigner(signer) {\n    if (!signer) {\n      throw new Error(`Signer address is required`);\n    }\n    if (signer.toLowerCase() !== this.address.toLowerCase()) {\n      throw new Error(`Unknown signer ${signer} (current signer is ${this.address})`);\n    }\n  }\n\n  _getWalletFromPrivateKey(privateKey) {\n    if (!privateKey) throw new Error('Private key must be set');\n    // This is an ethereumjs-wallet already\n    if (privateKey.getPrivateKey && privateKey.getAddress) return privateKey;\n    // This is an object that contains the private key\n    if (privateKey.privateKey) privateKey = privateKey.privateKey;\n    // Transform the private key into a buffer\n    const keyBuffer = typeof privateKey === 'string' ? new Buffer(privateKey.replace(/^0x/, ''), 'hex') : privateKey;\n    // Build the wallet from the key\n    return fromPrivateKey(keyBuffer);\n  }\n}\n\n// Copied from https://github.com/MetaMask/web3-provider-engine/blob/master/subproviders/hooked-wallet-ethtx.js\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r);\n  s = ethUtil.fromSigned(s);\n  v = ethUtil.bufferToInt(v);\n  r = ethUtil\n    .toUnsigned(r)\n    .toString('hex')\n    .padStart(64, 0);\n  s = ethUtil\n    .toUnsigned(s)\n    .toString('hex')\n    .padStart(64, 0);\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v));\n  return ethUtil.addHexPrefix(r.concat(s, v).toString('hex'));\n}\n\nmodule.exports = PrivateKeyProvider;\n"]},"metadata":{},"sourceType":"script"}