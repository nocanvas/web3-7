{"ast":null,"code":"var _objectSpread = require(\"/Users/john/Documents/GitHub/web3-3/client/web3-7/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/john/Documents/GitHub/web3-3/client/web3-7/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/john/Documents/GitHub/web3-3/client/web3-7/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Web3 = require('web3');\n\nvar RelayClient = require('./tabookey-gasless/RelayClient');\n\nvar PrivateKeyProvider = require('./PrivateKeyProvider');\n\nvar _require = require('./utils'),\n    callAsJsonRpc = _require.callAsJsonRpc,\n    fixTransactionReceiptResponse = _require.fixTransactionReceiptResponse;\n\nvar GSNProvider = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GSNProvider(base) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GSNProvider);\n\n    var web3 = new Web3(base);\n\n    this._delegateToProvider(web3.currentProvider);\n\n    this._wrapWithPrivateKey(web3, options);\n\n    base = web3.currentProvider;\n    this.baseProvider = base;\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n    this.sendAsync = this.send.bind(this);\n    this.relayClient = new RelayClient(web3, _objectSpread(_objectSpread({}, options), {}, {\n      userAgent: \"oz-gsn-provider-\".concat(require('../package.json').version)\n    }));\n    this.useGSN = options && typeof options.useGSN !== 'undefined' ? options.useGSN : true;\n    this.isGSNProvider = true;\n    this.options = options;\n    this.relayedTxs = new Set();\n  }\n\n  _createClass(GSNProvider, [{\n    key: \"send\",\n    value: function send(payload, callback) {\n      switch (payload.method) {\n        case 'eth_sendTransaction':\n          if (this._handleSendTransaction(payload, callback)) return;\n          break;\n\n        case 'eth_estimateGas':\n          if (this._handleEstimateGas(payload, callback)) return;\n          break;\n\n        case 'eth_getTransactionReceipt':\n          if (this._handleGetTransactionReceipt(payload, callback)) return;\n          break;\n      } // Default by sending to base provider\n\n\n      return this.baseSend(payload, callback);\n    }\n  }, {\n    key: \"_handleGetTransactionReceipt\",\n    value: function _handleGetTransactionReceipt(payload, callback) {\n      var _this = this;\n\n      // Check for GSN usage\n      var txHash = payload.params[0];\n      if (!this._withGSN(payload) && !this.relayedTxs.has(txHash)) return false; // Set error status if tx was rejected\n\n      this.baseSend(payload, function (err, receipt) {\n        if (err) callback(err, null);else callback(null, fixTransactionReceiptResponse(receipt, _this.options.verbose));\n      });\n      return true;\n    }\n  }, {\n    key: \"_handleSendTransaction\",\n    value: function _handleSendTransaction(payload, callback) {\n      var _this2 = this;\n\n      // Check for GSN usage\n      var txParams = payload.params[0];\n      if (!this._withGSN(payload, txParams)) return false; // Use sign key address if set\n\n      if (!txParams.from && this.base.address) txParams.from = this.base.address; // TODO: move validations to the relay client\n\n      if (!txParams.to) {\n        return callback(new Error('Cannot deploy a new contract via the GSN'), null);\n      }\n\n      if (txParams.value) {\n        var strValue = txParams.value.toString();\n\n        if (strValue !== '0' && strValue !== '0x0') {\n          return callback(new Error('Cannot send funds via the GSN'), null);\n        }\n      } // Delegate to relay client\n\n\n      callAsJsonRpc(this.relayClient.sendTransaction.bind(this.relayClient), [payload], payload.id, callback, function (txHash) {\n        _this2.relayedTxs.add(txHash);\n\n        return {\n          result: txHash\n        };\n      });\n      return true;\n    }\n  }, {\n    key: \"_handleEstimateGas\",\n    value: function _handleEstimateGas(payload, callback) {\n      var txParams = payload.params[0];\n      if (!this._withGSN(payload, txParams)) return false;\n      callAsJsonRpc(this.relayClient.estimateGas.bind(this.relayClient), [txParams], payload.id, callback);\n      return true;\n    }\n  }, {\n    key: \"_withGSN\",\n    value: function _withGSN(payload, options) {\n      if (options) {\n        var useGSN = options.useGSN;\n\n        if (typeof useGSN !== 'undefined') {\n          return useGSN;\n        }\n      }\n\n      return typeof this.useGSN === 'function' ? this.useGSN(payload) : this.useGSN;\n    }\n  }, {\n    key: \"_delegateToProvider\",\n    value: function _delegateToProvider(provider) {\n      var _this3 = this;\n\n      var delegate = function delegate(fn) {\n        if (provider[fn]) _this3[fn] = provider[fn].bind(provider);\n      }; // If the subprovider is a ws or ipc provider, then register all its methods on this provider\n      // and delegate calls to the subprovider. This allows subscriptions to work.\n\n\n      delegate('on');\n      delegate('removeListener');\n      delegate('removeAllListeners');\n      delegate('reset');\n      delegate('disconnect');\n      delegate('addDefaultEvents');\n      delegate('once');\n      delegate('reconnect');\n    }\n  }, {\n    key: \"_wrapWithPrivateKey\",\n    value: function _wrapWithPrivateKey(web3, options) {\n      if (options.signKey) {\n        var provider = new PrivateKeyProvider(web3.currentProvider, options.signKey);\n        web3.setProvider(provider);\n      }\n    }\n  }]);\n\n  return GSNProvider;\n}();\n\nmodule.exports = GSNProvider;","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/@openzeppelin/gsn-provider/src/GSNProvider.js"],"names":["Web3","require","RelayClient","PrivateKeyProvider","callAsJsonRpc","fixTransactionReceiptResponse","GSNProvider","base","options","web3","_delegateToProvider","currentProvider","_wrapWithPrivateKey","baseProvider","baseSend","sendAsync","send","bind","relayClient","userAgent","version","useGSN","isGSNProvider","relayedTxs","Set","payload","callback","method","_handleSendTransaction","_handleEstimateGas","_handleGetTransactionReceipt","txHash","params","_withGSN","has","err","receipt","verbose","txParams","from","address","to","Error","value","strValue","toString","sendTransaction","id","add","result","estimateGas","provider","delegate","fn","signKey","setProvider","module","exports"],"mappings":"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","sourcesContent":["const Web3 = require('web3');\nconst RelayClient = require('./tabookey-gasless/RelayClient');\nconst PrivateKeyProvider = require('./PrivateKeyProvider');\nconst { callAsJsonRpc, fixTransactionReceiptResponse } = require('./utils');\n\nclass GSNProvider {\n  constructor(base, options = {}) {\n    const web3 = new Web3(base);\n    this._delegateToProvider(web3.currentProvider);\n    this._wrapWithPrivateKey(web3, options);\n\n    base = web3.currentProvider;\n    this.baseProvider = base;\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n\n    this.sendAsync = this.send.bind(this);\n    this.relayClient = new RelayClient(web3, {\n      ...options,\n      userAgent: `oz-gsn-provider-${require('../package.json').version}`,\n    });\n    this.useGSN = options && typeof options.useGSN !== 'undefined' ? options.useGSN : true;\n    this.isGSNProvider = true;\n    this.options = options;\n    this.relayedTxs = new Set();\n  }\n\n  send(payload, callback) {\n    switch (payload.method) {\n      case 'eth_sendTransaction':\n        if (this._handleSendTransaction(payload, callback)) return;\n        break;\n\n      case 'eth_estimateGas':\n        if (this._handleEstimateGas(payload, callback)) return;\n        break;\n\n      case 'eth_getTransactionReceipt':\n        if (this._handleGetTransactionReceipt(payload, callback)) return;\n        break;\n    }\n\n    // Default by sending to base provider\n    return this.baseSend(payload, callback);\n  }\n\n  _handleGetTransactionReceipt(payload, callback) {\n    // Check for GSN usage\n    const txHash = payload.params[0];\n    if (!this._withGSN(payload) && !this.relayedTxs.has(txHash)) return false;\n\n    // Set error status if tx was rejected\n    this.baseSend(payload, (err, receipt) => {\n      if (err) callback(err, null);\n      else callback(null, fixTransactionReceiptResponse(receipt, this.options.verbose));\n    });\n\n    return true;\n  }\n\n  _handleSendTransaction(payload, callback) {\n    // Check for GSN usage\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false;\n\n    // Use sign key address if set\n    if (!txParams.from && this.base.address) txParams.from = this.base.address;\n\n    // TODO: move validations to the relay client\n    if (!txParams.to) {\n      return callback(new Error('Cannot deploy a new contract via the GSN'), null);\n    }\n    if (txParams.value) {\n      const strValue = txParams.value.toString();\n      if (strValue !== '0' && strValue !== '0x0') {\n        return callback(new Error('Cannot send funds via the GSN'), null);\n      }\n    }\n\n    // Delegate to relay client\n    callAsJsonRpc(this.relayClient.sendTransaction.bind(this.relayClient), [payload], payload.id, callback, txHash => {\n      this.relayedTxs.add(txHash);\n      return { result: txHash };\n    });\n\n    return true;\n  }\n\n  _handleEstimateGas(payload, callback) {\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false;\n    callAsJsonRpc(this.relayClient.estimateGas.bind(this.relayClient), [txParams], payload.id, callback);\n\n    return true;\n  }\n\n  _withGSN(payload, options) {\n    if (options) {\n      const useGSN = options.useGSN;\n      if (typeof useGSN !== 'undefined') {\n        return useGSN;\n      }\n    }\n\n    return typeof this.useGSN === 'function' ? this.useGSN(payload) : this.useGSN;\n  }\n\n  _delegateToProvider(provider) {\n    const delegate = fn => {\n      if (provider[fn]) this[fn] = provider[fn].bind(provider);\n    };\n\n    // If the subprovider is a ws or ipc provider, then register all its methods on this provider\n    // and delegate calls to the subprovider. This allows subscriptions to work.\n    delegate('on');\n    delegate('removeListener');\n    delegate('removeAllListeners');\n    delegate('reset');\n    delegate('disconnect');\n    delegate('addDefaultEvents');\n    delegate('once');\n    delegate('reconnect');\n  }\n\n  _wrapWithPrivateKey(web3, options) {\n    if (options.signKey) {\n      const provider = new PrivateKeyProvider(web3.currentProvider, options.signKey);\n      web3.setProvider(provider);\n    }\n  }\n}\n\nmodule.exports = GSNProvider;\n"]},"metadata":{},"sourceType":"script"}