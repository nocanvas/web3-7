{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/john/Documents/GitHub/test1/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/john/Documents/GitHub/test1/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/john/Documents/GitHub/test1/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nvar _require = require('ethereum-cryptography/secp256k1'),\n    privateKeyVerify = _require.privateKeyVerify,\n    publicKeyCreate = _require.publicKeyCreate,\n    publicKeyVerify = _require.publicKeyVerify,\n    publicKeyConvert = _require.publicKeyConvert;\n\nvar Account = /*#__PURE__*/function () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account() {\n    var nonce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new bn_js_1.default(0);\n    var balance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new bn_js_1.default(0);\n    var stateRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.KECCAK256_RLP;\n    var codeHash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.KECCAK256_NULL;\n\n    _classCallCheck(this, Account);\n\n    this.nonce = nonce;\n    this.balance = balance;\n    this.stateRoot = stateRoot;\n    this.codeHash = codeHash;\n\n    this._validate();\n  }\n\n  _createClass(Account, [{\n    key: \"_validate\",\n    value: function _validate() {\n      if (this.nonce.lt(new bn_js_1.default(0))) {\n        throw new Error('nonce must be greater than zero');\n      }\n\n      if (this.balance.lt(new bn_js_1.default(0))) {\n        throw new Error('balance must be greater than zero');\n      }\n\n      if (this.stateRoot.length !== 32) {\n        throw new Error('stateRoot must have a length of 32');\n      }\n\n      if (this.codeHash.length !== 32) {\n        throw new Error('codeHash must have a length of 32');\n      }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      return [types_1.bnToRlp(this.nonce), types_1.bnToRlp(this.balance), this.stateRoot, this.codeHash];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return rlp.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n\n  }, {\n    key: \"isContract\",\n    value: function isContract() {\n      return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n  }], [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(accountData) {\n      var nonce = accountData.nonce,\n          balance = accountData.balance,\n          stateRoot = accountData.stateRoot,\n          codeHash = accountData.codeHash;\n      return new Account(nonce ? new bn_js_1.default(bytes_1.toBuffer(nonce)) : undefined, balance ? new bn_js_1.default(bytes_1.toBuffer(balance)) : undefined, stateRoot ? bytes_1.toBuffer(stateRoot) : undefined, codeHash ? bytes_1.toBuffer(codeHash) : undefined);\n    }\n  }, {\n    key: \"fromRlpSerializedAccount\",\n    value: function fromRlpSerializedAccount(serialized) {\n      var values = rlp.decode(serialized);\n\n      if (!Array.isArray(values)) {\n        throw new Error('Invalid serialized account input. Must be array');\n      }\n\n      return this.fromValuesArray(values);\n    }\n  }, {\n    key: \"fromValuesArray\",\n    value: function fromValuesArray(values) {\n      var _values = _slicedToArray(values, 4),\n          nonce = _values[0],\n          balance = _values[1],\n          stateRoot = _values[2],\n          codeHash = _values[3];\n\n      return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);\n    }\n  }]);\n\n  return Account;\n}();\n\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\n\nexports.isValidAddress = function (hexAddress) {\n  helpers_1.assertIsHexString(hexAddress);\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\n\n\nexports.toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  helpers_1.assertIsHexString(hexAddress);\n  var address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();\n  var prefix = '';\n\n  if (eip1191ChainId) {\n    var chainId = types_1.toType(eip1191ChainId, types_1.TypeOutput.BN);\n    prefix = chainId.toString() + '0x';\n  }\n\n  var hash = hash_1.keccakFromString(prefix + address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\n\n\nexports.isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return exports.isValidAddress(hexAddress) && exports.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\n\n\nexports.generateAddress = function (from, nonce) {\n  helpers_1.assertIsBuffer(from);\n  helpers_1.assertIsBuffer(nonce);\n  var nonceBN = new bn_js_1.default(nonce);\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return hash_1.rlphash([from, null]).slice(-20);\n  } // Only take the lower 160bits of the hash\n\n\n  return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\n\n\nexports.generateAddress2 = function (from, salt, initCode) {\n  helpers_1.assertIsBuffer(from);\n  helpers_1.assertIsBuffer(salt);\n  helpers_1.assertIsBuffer(initCode);\n  assert_1.default(from.length === 20);\n  assert_1.default(salt.length === 32);\n  var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, hash_1.keccak256(initCode)]));\n  return address.slice(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\n\n\nexports.isValidPrivate = function (privateKey) {\n  return privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\n\nexports.isValidPublic = function (publicKey) {\n  var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  helpers_1.assertIsBuffer(publicKey);\n\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\n\n\nexports.pubToAddress = function (pubKey) {\n  var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  helpers_1.assertIsBuffer(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1));\n  }\n\n  assert_1.default(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return hash_1.keccak(pubKey).slice(-20);\n};\n\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\nexports.privateToPublic = function (privateKey) {\n  helpers_1.assertIsBuffer(privateKey); // skip the type flag and use the X, Y points\n\n  return Buffer.from(publicKeyCreate(privateKey, false)).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\n\n\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\n\n\nexports.importPublic = function (publicKey) {\n  helpers_1.assertIsBuffer(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1));\n  }\n\n  return publicKey;\n};\n/**\n * Returns the zero address.\n */\n\n\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var addr = bytes_1.zeros(addressLength);\n  return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\n\n\nexports.isZeroAddress = function (hexAddress) {\n  helpers_1.assertIsHexString(hexAddress);\n  var zeroAddr = exports.zeroAddress();\n  return zeroAddr === hexAddress;\n};","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst rlp = __importStar(require(\"rlp\"));\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst constants_1 = require(\"./constants\");\nconst bytes_1 = require(\"./bytes\");\nconst hash_1 = require(\"./hash\");\nconst helpers_1 = require(\"./helpers\");\nconst types_1 = require(\"./types\");\nconst { privateKeyVerify, publicKeyCreate, publicKeyVerify, publicKeyConvert } = require('ethereum-cryptography/secp256k1');\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = new bn_js_1.default(0), balance = new bn_js_1.default(0), stateRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, stateRoot, codeHash } = accountData;\n        return new Account(nonce ? new bn_js_1.default(bytes_1.toBuffer(nonce)) : undefined, balance ? new bn_js_1.default(bytes_1.toBuffer(balance)) : undefined, stateRoot ? bytes_1.toBuffer(stateRoot) : undefined, codeHash ? bytes_1.toBuffer(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, stateRoot, codeHash] = values;\n        return new Account(new bn_js_1.default(nonce), new bn_js_1.default(balance), stateRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce.lt(new bn_js_1.default(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new bn_js_1.default(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    raw() {\n        return [types_1.bnToRlp(this.nonce), types_1.bnToRlp(this.balance), this.stateRoot, this.codeHash];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    serialize() {\n        return rlp.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (hexAddress) {\n    helpers_1.assertIsHexString(hexAddress);\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    helpers_1.assertIsHexString(hexAddress);\n    const address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId) {\n        const chainId = types_1.toType(eip1191ChainId, types_1.TypeOutput.BN);\n        prefix = chainId.toString() + '0x';\n    }\n    const hash = hash_1.keccakFromString(prefix + address).toString('hex');\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return exports.isValidAddress(hexAddress) && exports.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(nonce);\n    const nonceBN = new bn_js_1.default(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(salt);\n    helpers_1.assertIsBuffer(initCode);\n    assert_1.default(from.length === 20);\n    assert_1.default(salt.length === 32);\n    const address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, hash_1.keccak256(initCode)]));\n    return address.slice(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize = false) {\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize = false) {\n    helpers_1.assertIsBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1));\n    }\n    assert_1.default(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    helpers_1.assertIsBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(publicKeyCreate(privateKey, false)).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nexports.zeroAddress = function () {\n    const addressLength = 20;\n    const addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nexports.isZeroAddress = function (hexAddress) {\n    helpers_1.assertIsHexString(hexAddress);\n    const zeroAddr = exports.zeroAddress();\n    return zeroAddr === hexAddress;\n};\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}