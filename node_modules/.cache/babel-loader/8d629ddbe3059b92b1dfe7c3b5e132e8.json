{"ast":null,"code":"import { ecdsaRecover } from 'secp256k1';\nimport { removeLeading0x, hexToUnit8Array, uint8ArrayToHex } from './util';\n/**\n * returns the publicKey for the privateKey with which the messageHash was signed\n * @param  {string} signature\n * @param  {string} hash\n * @return {string} publicKey\n */\n\nexport default function recoverPublicKey(signature, hash) {\n  signature = removeLeading0x(signature); // split into v-value and sig\n\n  var sigOnly = signature.substring(0, signature.length - 2); // all but last 2 chars\n\n  var vValue = signature.slice(-2); // last 2 chars\n\n  var recoveryNumber = vValue === '1c' ? 1 : 0;\n  var pubKey = uint8ArrayToHex(ecdsaRecover(hexToUnit8Array(sigOnly), recoveryNumber, hexToUnit8Array(removeLeading0x(hash)), false)); // remove trailing '04'\n\n  pubKey = pubKey.slice(2);\n  return pubKey;\n}","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/eth-crypto/dist/es/recover-public-key.js"],"names":["ecdsaRecover","removeLeading0x","hexToUnit8Array","uint8ArrayToHex","recoverPublicKey","signature","hash","sigOnly","substring","length","vValue","slice","recoveryNumber","pubKey"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,eAA3C,QAAkE,QAAlE;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,IAArC,EAA2C;AACtDD,EAAAA,SAAS,GAAGJ,eAAe,CAACI,SAAD,CAA3B,CADsD,CAGtD;;AACA,MAAIE,OAAO,GAAGF,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuBH,SAAS,CAACI,MAAV,GAAmB,CAA1C,CAAd,CAJsD,CAIM;;AAC5D,MAAIC,MAAM,GAAGL,SAAS,CAACM,KAAV,CAAgB,CAAC,CAAjB,CAAb,CALsD,CAKpB;;AAElC,MAAIC,cAAc,GAAGF,MAAM,KAAK,IAAX,GAAkB,CAAlB,GAAsB,CAA3C;AAEA,MAAIG,MAAM,GAAGV,eAAe,CAACH,YAAY,CAACE,eAAe,CAACK,OAAD,CAAhB,EAA2BK,cAA3B,EAA2CV,eAAe,CAACD,eAAe,CAACK,IAAD,CAAhB,CAA1D,EAAmF,KAAnF,CAAb,CAA5B,CATsD,CAWtD;;AACAO,EAAAA,MAAM,GAAGA,MAAM,CAACF,KAAP,CAAa,CAAb,CAAT;AAEA,SAAOE,MAAP;AACH","sourcesContent":["import { ecdsaRecover } from 'secp256k1';\nimport { removeLeading0x, hexToUnit8Array, uint8ArrayToHex } from './util';\n\n/**\n * returns the publicKey for the privateKey with which the messageHash was signed\n * @param  {string} signature\n * @param  {string} hash\n * @return {string} publicKey\n */\nexport default function recoverPublicKey(signature, hash) {\n    signature = removeLeading0x(signature);\n\n    // split into v-value and sig\n    var sigOnly = signature.substring(0, signature.length - 2); // all but last 2 chars\n    var vValue = signature.slice(-2); // last 2 chars\n\n    var recoveryNumber = vValue === '1c' ? 1 : 0;\n\n    var pubKey = uint8ArrayToHex(ecdsaRecover(hexToUnit8Array(sigOnly), recoveryNumber, hexToUnit8Array(removeLeading0x(hash)), false));\n\n    // remove trailing '04'\n    pubKey = pubKey.slice(2);\n\n    return pubKey;\n}"]},"metadata":{},"sourceType":"module"}