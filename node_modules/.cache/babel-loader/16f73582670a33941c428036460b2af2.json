{"ast":null,"code":"const Web3 = require('web3');\n\nconst RelayClient = require('./tabookey-gasless/RelayClient');\n\nconst PrivateKeyProvider = require('./PrivateKeyProvider');\n\nconst {\n  callAsJsonRpc,\n  fixTransactionReceiptResponse\n} = require('./utils');\n\nclass GSNProvider {\n  constructor(base, options = {}) {\n    const web3 = new Web3(base);\n\n    this._delegateToProvider(web3.currentProvider);\n\n    this._wrapWithPrivateKey(web3, options);\n\n    base = web3.currentProvider;\n    this.baseProvider = base;\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n    this.sendAsync = this.send.bind(this);\n    this.relayClient = new RelayClient(web3, { ...options,\n      userAgent: `oz-gsn-provider-${require('../package.json').version}`\n    });\n    this.useGSN = options && typeof options.useGSN !== 'undefined' ? options.useGSN : true;\n    this.isGSNProvider = true;\n    this.options = options;\n    this.relayedTxs = new Set();\n  }\n\n  send(payload, callback) {\n    switch (payload.method) {\n      case 'eth_sendTransaction':\n        if (this._handleSendTransaction(payload, callback)) return;\n        break;\n\n      case 'eth_estimateGas':\n        if (this._handleEstimateGas(payload, callback)) return;\n        break;\n\n      case 'eth_getTransactionReceipt':\n        if (this._handleGetTransactionReceipt(payload, callback)) return;\n        break;\n    } // Default by sending to base provider\n\n\n    return this.baseSend(payload, callback);\n  }\n\n  _handleGetTransactionReceipt(payload, callback) {\n    // Check for GSN usage\n    const txHash = payload.params[0];\n    if (!this._withGSN(payload) && !this.relayedTxs.has(txHash)) return false; // Set error status if tx was rejected\n\n    this.baseSend(payload, (err, receipt) => {\n      if (err) callback(err, null);else callback(null, fixTransactionReceiptResponse(receipt, this.options.verbose));\n    });\n    return true;\n  }\n\n  _handleSendTransaction(payload, callback) {\n    // Check for GSN usage\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false; // Use sign key address if set\n\n    if (!txParams.from && this.base.address) txParams.from = this.base.address; // TODO: move validations to the relay client\n\n    if (!txParams.to) {\n      return callback(new Error('Cannot deploy a new contract via the GSN'), null);\n    }\n\n    if (txParams.value) {\n      const strValue = txParams.value.toString();\n\n      if (strValue !== '0' && strValue !== '0x0') {\n        return callback(new Error('Cannot send funds via the GSN'), null);\n      }\n    } // Delegate to relay client\n\n\n    callAsJsonRpc(this.relayClient.sendTransaction.bind(this.relayClient), [payload], payload.id, callback, txHash => {\n      this.relayedTxs.add(txHash);\n      return {\n        result: txHash\n      };\n    });\n    return true;\n  }\n\n  _handleEstimateGas(payload, callback) {\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false;\n    callAsJsonRpc(this.relayClient.estimateGas.bind(this.relayClient), [txParams], payload.id, callback);\n    return true;\n  }\n\n  _withGSN(payload, options) {\n    if (options) {\n      const useGSN = options.useGSN;\n\n      if (typeof useGSN !== 'undefined') {\n        return useGSN;\n      }\n    }\n\n    return typeof this.useGSN === 'function' ? this.useGSN(payload) : this.useGSN;\n  }\n\n  _delegateToProvider(provider) {\n    const delegate = fn => {\n      if (provider[fn]) this[fn] = provider[fn].bind(provider);\n    }; // If the subprovider is a ws or ipc provider, then register all its methods on this provider\n    // and delegate calls to the subprovider. This allows subscriptions to work.\n\n\n    delegate('on');\n    delegate('removeListener');\n    delegate('removeAllListeners');\n    delegate('reset');\n    delegate('disconnect');\n    delegate('addDefaultEvents');\n    delegate('once');\n    delegate('reconnect');\n  }\n\n  _wrapWithPrivateKey(web3, options) {\n    if (options.signKey) {\n      const provider = new PrivateKeyProvider(web3.currentProvider, options.signKey);\n      web3.setProvider(provider);\n    }\n  }\n\n}\n\nmodule.exports = GSNProvider;","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/@openzeppelin/gsn-provider/src/GSNProvider.js"],"names":["Web3","require","RelayClient","PrivateKeyProvider","callAsJsonRpc","fixTransactionReceiptResponse","GSNProvider","constructor","base","options","web3","_delegateToProvider","currentProvider","_wrapWithPrivateKey","baseProvider","baseSend","sendAsync","send","bind","relayClient","userAgent","version","useGSN","isGSNProvider","relayedTxs","Set","payload","callback","method","_handleSendTransaction","_handleEstimateGas","_handleGetTransactionReceipt","txHash","params","_withGSN","has","err","receipt","verbose","txParams","from","address","to","Error","value","strValue","toString","sendTransaction","id","add","result","estimateGas","provider","delegate","fn","signKey","setProvider","module","exports"],"mappings":"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","sourcesContent":["const Web3 = require('web3');\nconst RelayClient = require('./tabookey-gasless/RelayClient');\nconst PrivateKeyProvider = require('./PrivateKeyProvider');\nconst { callAsJsonRpc, fixTransactionReceiptResponse } = require('./utils');\n\nclass GSNProvider {\n  constructor(base, options = {}) {\n    const web3 = new Web3(base);\n    this._delegateToProvider(web3.currentProvider);\n    this._wrapWithPrivateKey(web3, options);\n\n    base = web3.currentProvider;\n    this.baseProvider = base;\n    this.baseSend = (base.sendAsync || base.send).bind(base);\n\n    this.sendAsync = this.send.bind(this);\n    this.relayClient = new RelayClient(web3, {\n      ...options,\n      userAgent: `oz-gsn-provider-${require('../package.json').version}`,\n    });\n    this.useGSN = options && typeof options.useGSN !== 'undefined' ? options.useGSN : true;\n    this.isGSNProvider = true;\n    this.options = options;\n    this.relayedTxs = new Set();\n  }\n\n  send(payload, callback) {\n    switch (payload.method) {\n      case 'eth_sendTransaction':\n        if (this._handleSendTransaction(payload, callback)) return;\n        break;\n\n      case 'eth_estimateGas':\n        if (this._handleEstimateGas(payload, callback)) return;\n        break;\n\n      case 'eth_getTransactionReceipt':\n        if (this._handleGetTransactionReceipt(payload, callback)) return;\n        break;\n    }\n\n    // Default by sending to base provider\n    return this.baseSend(payload, callback);\n  }\n\n  _handleGetTransactionReceipt(payload, callback) {\n    // Check for GSN usage\n    const txHash = payload.params[0];\n    if (!this._withGSN(payload) && !this.relayedTxs.has(txHash)) return false;\n\n    // Set error status if tx was rejected\n    this.baseSend(payload, (err, receipt) => {\n      if (err) callback(err, null);\n      else callback(null, fixTransactionReceiptResponse(receipt, this.options.verbose));\n    });\n\n    return true;\n  }\n\n  _handleSendTransaction(payload, callback) {\n    // Check for GSN usage\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false;\n\n    // Use sign key address if set\n    if (!txParams.from && this.base.address) txParams.from = this.base.address;\n\n    // TODO: move validations to the relay client\n    if (!txParams.to) {\n      return callback(new Error('Cannot deploy a new contract via the GSN'), null);\n    }\n    if (txParams.value) {\n      const strValue = txParams.value.toString();\n      if (strValue !== '0' && strValue !== '0x0') {\n        return callback(new Error('Cannot send funds via the GSN'), null);\n      }\n    }\n\n    // Delegate to relay client\n    callAsJsonRpc(this.relayClient.sendTransaction.bind(this.relayClient), [payload], payload.id, callback, txHash => {\n      this.relayedTxs.add(txHash);\n      return { result: txHash };\n    });\n\n    return true;\n  }\n\n  _handleEstimateGas(payload, callback) {\n    const txParams = payload.params[0];\n    if (!this._withGSN(payload, txParams)) return false;\n    callAsJsonRpc(this.relayClient.estimateGas.bind(this.relayClient), [txParams], payload.id, callback);\n\n    return true;\n  }\n\n  _withGSN(payload, options) {\n    if (options) {\n      const useGSN = options.useGSN;\n      if (typeof useGSN !== 'undefined') {\n        return useGSN;\n      }\n    }\n\n    return typeof this.useGSN === 'function' ? this.useGSN(payload) : this.useGSN;\n  }\n\n  _delegateToProvider(provider) {\n    const delegate = fn => {\n      if (provider[fn]) this[fn] = provider[fn].bind(provider);\n    };\n\n    // If the subprovider is a ws or ipc provider, then register all its methods on this provider\n    // and delegate calls to the subprovider. This allows subscriptions to work.\n    delegate('on');\n    delegate('removeListener');\n    delegate('removeAllListeners');\n    delegate('reset');\n    delegate('disconnect');\n    delegate('addDefaultEvents');\n    delegate('once');\n    delegate('reconnect');\n  }\n\n  _wrapWithPrivateKey(web3, options) {\n    if (options.signKey) {\n      const provider = new PrivateKeyProvider(web3.currentProvider, options.signKey);\n      web3.setProvider(provider);\n    }\n  }\n}\n\nmodule.exports = GSNProvider;\n"]},"metadata":{},"sourceType":"script"}