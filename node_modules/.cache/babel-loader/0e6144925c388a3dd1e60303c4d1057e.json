{"ast":null,"code":"import publicKeyByPrivateKey from './public-key-by-private-key';\nimport { fromPrivate } from 'eth-lib/lib/account';\nimport { keccak256 } from 'eth-lib/lib/hash';\nimport Bytes from 'eth-lib/lib/bytes';\nvar MIN_ENTROPY_SIZE = 128;\n/**\n * create a privateKey from the given entropy or a new one\n * @param  {Buffer} entropy\n * @return {string}\n */\n\nexport function createPrivateKey(entropy) {\n  if (entropy) {\n    if (!Buffer.isBuffer(entropy)) throw new Error('EthCrypto.createPrivateKey(): given entropy is no Buffer');\n    if (Buffer.byteLength(entropy, 'utf8') < MIN_ENTROPY_SIZE) throw new Error('EthCrypto.createPrivateKey(): Entropy-size must be at least ' + MIN_ENTROPY_SIZE);\n    var outerHex = keccak256(entropy);\n    return outerHex;\n  } else {\n    // @link https://github.com/MaiaVictor/eth-lib/blob/master/lib/account.js#L8\n    var innerHex = keccak256(Bytes.concat(Bytes.random(32), Bytes.random(32)));\n    var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n\n    var _outerHex = keccak256(middleHex);\n\n    return _outerHex;\n  }\n}\n/**\n * creates a new object with\n * private-, public-Key and address\n * @param {Buffer?} entropy if provided, will use that as single random-source\n */\n\nexport default function createIdentity(entropy) {\n  var privateKey = createPrivateKey(entropy);\n  var identity = fromPrivate(privateKey);\n  identity.publicKey = publicKeyByPrivateKey(identity.privateKey);\n  return identity;\n}","map":{"version":3,"sources":["/Users/john/Documents/GitHub/test1/node_modules/eth-crypto/dist/es/create-identity.js"],"names":["publicKeyByPrivateKey","fromPrivate","keccak256","Bytes","MIN_ENTROPY_SIZE","createPrivateKey","entropy","Buffer","isBuffer","Error","byteLength","outerHex","innerHex","concat","random","middleHex","_outerHex","createIdentity","privateKey","identity","publicKey"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,6BAAlC;AAEA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,IAAIC,gBAAgB,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACtC,MAAIA,OAAJ,EAAa;AACT,QAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAL,EAA+B,MAAM,IAAIG,KAAJ,CAAU,0DAAV,CAAN;AAC/B,QAAIF,MAAM,CAACG,UAAP,CAAkBJ,OAAlB,EAA2B,MAA3B,IAAqCF,gBAAzC,EAA2D,MAAM,IAAIK,KAAJ,CAAU,iEAAiEL,gBAA3E,CAAN;AAE3D,QAAIO,QAAQ,GAAGT,SAAS,CAACI,OAAD,CAAxB;AACA,WAAOK,QAAP;AACH,GAND,MAMO;AACH;AACA,QAAIC,QAAQ,GAAGV,SAAS,CAACC,KAAK,CAACU,MAAN,CAAaV,KAAK,CAACW,MAAN,CAAa,EAAb,CAAb,EAA+BX,KAAK,CAACW,MAAN,CAAa,EAAb,CAA/B,CAAD,CAAxB;AACA,QAAIC,SAAS,GAAGZ,KAAK,CAACU,MAAN,CAAaV,KAAK,CAACU,MAAN,CAAaV,KAAK,CAACW,MAAN,CAAa,EAAb,CAAb,EAA+BF,QAA/B,CAAb,EAAuDT,KAAK,CAACW,MAAN,CAAa,EAAb,CAAvD,CAAhB;;AACA,QAAIE,SAAS,GAAGd,SAAS,CAACa,SAAD,CAAzB;;AACA,WAAOC,SAAP;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBX,OAAxB,EAAiC;AAC5C,MAAIY,UAAU,GAAGb,gBAAgB,CAACC,OAAD,CAAjC;AACA,MAAIa,QAAQ,GAAGlB,WAAW,CAACiB,UAAD,CAA1B;AACAC,EAAAA,QAAQ,CAACC,SAAT,GAAqBpB,qBAAqB,CAACmB,QAAQ,CAACD,UAAV,CAA1C;AACA,SAAOC,QAAP;AACH","sourcesContent":["import publicKeyByPrivateKey from './public-key-by-private-key';\n\nimport { fromPrivate } from 'eth-lib/lib/account';\nimport { keccak256 } from 'eth-lib/lib/hash';\nimport Bytes from 'eth-lib/lib/bytes';\n\nvar MIN_ENTROPY_SIZE = 128;\n\n/**\n * create a privateKey from the given entropy or a new one\n * @param  {Buffer} entropy\n * @return {string}\n */\nexport function createPrivateKey(entropy) {\n    if (entropy) {\n        if (!Buffer.isBuffer(entropy)) throw new Error('EthCrypto.createPrivateKey(): given entropy is no Buffer');\n        if (Buffer.byteLength(entropy, 'utf8') < MIN_ENTROPY_SIZE) throw new Error('EthCrypto.createPrivateKey(): Entropy-size must be at least ' + MIN_ENTROPY_SIZE);\n\n        var outerHex = keccak256(entropy);\n        return outerHex;\n    } else {\n        // @link https://github.com/MaiaVictor/eth-lib/blob/master/lib/account.js#L8\n        var innerHex = keccak256(Bytes.concat(Bytes.random(32), Bytes.random(32)));\n        var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n        var _outerHex = keccak256(middleHex);\n        return _outerHex;\n    }\n}\n\n/**\n * creates a new object with\n * private-, public-Key and address\n * @param {Buffer?} entropy if provided, will use that as single random-source\n */\nexport default function createIdentity(entropy) {\n    var privateKey = createPrivateKey(entropy);\n    var identity = fromPrivate(privateKey);\n    identity.publicKey = publicKeyByPrivateKey(identity.privateKey);\n    return identity;\n}"]},"metadata":{},"sourceType":"module"}