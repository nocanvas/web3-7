{"ast":null,"code":"import createIdentity from './create-identity';\nimport * as publicKey from './public-key';\nimport decryptWithPrivateKey from './decrypt-with-private-key';\nimport encryptWithPublicKey from './encrypt-with-public-key';\nimport * as cipher from './cipher';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport recover from './recover';\nimport recoverPublicKey from './recover-public-key';\nimport sign from './sign';\nimport signTransaction from './sign-transaction';\nimport txDataByCompiled from './tx-data-by-compiled';\nimport calculateContractAddress from './calculate-contract-address';\nimport * as hash from './hash';\nimport * as hex from './hex';\nimport * as vrs from './vrs';\nimport * as util from './util';\nexport { createIdentity, publicKey, decryptWithPrivateKey, encryptWithPublicKey, cipher, publicKeyByPrivateKey, recover, recoverPublicKey, sign, signTransaction, txDataByCompiled, calculateContractAddress, hash, hex, vrs, util };\nexport default {\n  createIdentity: createIdentity,\n  publicKey: publicKey,\n  decryptWithPrivateKey: decryptWithPrivateKey,\n  encryptWithPublicKey: encryptWithPublicKey,\n  cipher: cipher,\n  publicKeyByPrivateKey: publicKeyByPrivateKey,\n  recover: recover,\n  recoverPublicKey: recoverPublicKey,\n  sign: sign,\n  signTransaction: signTransaction,\n  txDataByCompiled: txDataByCompiled,\n  calculateContractAddress: calculateContractAddress,\n  hash: hash,\n  hex: hex,\n  vrs: vrs,\n  util: util\n};","map":{"version":3,"sources":["/Users/john/Documents/GitHub/web3-3/node_modules/eth-crypto/dist/es/index.js"],"names":["createIdentity","publicKey","decryptWithPrivateKey","encryptWithPublicKey","cipher","publicKeyByPrivateKey","recover","recoverPublicKey","sign","signTransaction","txDataByCompiled","calculateContractAddress","hash","hex","vrs","util"],"mappings":"AACA,OAAOA,cAAP,MAA2B,mBAA3B;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,wBAAP,MAAqC,8BAArC;AACA,OAAO,KAAKC,IAAZ,MAAsB,QAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,QAAtB;AAEA,SAASf,cAAT,EAAyBC,SAAzB,EAAoCC,qBAApC,EAA2DC,oBAA3D,EAAiFC,MAAjF,EAAyFC,qBAAzF,EAAgHC,OAAhH,EAAyHC,gBAAzH,EAA2IC,IAA3I,EAAiJC,eAAjJ,EAAkKC,gBAAlK,EAAoLC,wBAApL,EAA8MC,IAA9M,EAAoNC,GAApN,EAAyNC,GAAzN,EAA8NC,IAA9N;AAEA,eAAe;AACXf,EAAAA,cAAc,EAAEA,cADL;AAEXC,EAAAA,SAAS,EAAEA,SAFA;AAGXC,EAAAA,qBAAqB,EAAEA,qBAHZ;AAIXC,EAAAA,oBAAoB,EAAEA,oBAJX;AAKXC,EAAAA,MAAM,EAAEA,MALG;AAMXC,EAAAA,qBAAqB,EAAEA,qBANZ;AAOXC,EAAAA,OAAO,EAAEA,OAPE;AAQXC,EAAAA,gBAAgB,EAAEA,gBARP;AASXC,EAAAA,IAAI,EAAEA,IATK;AAUXC,EAAAA,eAAe,EAAEA,eAVN;AAWXC,EAAAA,gBAAgB,EAAEA,gBAXP;AAYXC,EAAAA,wBAAwB,EAAEA,wBAZf;AAaXC,EAAAA,IAAI,EAAEA,IAbK;AAcXC,EAAAA,GAAG,EAAEA,GAdM;AAeXC,EAAAA,GAAG,EAAEA,GAfM;AAgBXC,EAAAA,IAAI,EAAEA;AAhBK,CAAf","sourcesContent":["\nimport createIdentity from './create-identity';\nimport * as publicKey from './public-key';\nimport decryptWithPrivateKey from './decrypt-with-private-key';\nimport encryptWithPublicKey from './encrypt-with-public-key';\nimport * as cipher from './cipher';\nimport publicKeyByPrivateKey from './public-key-by-private-key';\nimport recover from './recover';\nimport recoverPublicKey from './recover-public-key';\nimport sign from './sign';\nimport signTransaction from './sign-transaction';\nimport txDataByCompiled from './tx-data-by-compiled';\nimport calculateContractAddress from './calculate-contract-address';\nimport * as hash from './hash';\nimport * as hex from './hex';\nimport * as vrs from './vrs';\nimport * as util from './util';\n\nexport { createIdentity, publicKey, decryptWithPrivateKey, encryptWithPublicKey, cipher, publicKeyByPrivateKey, recover, recoverPublicKey, sign, signTransaction, txDataByCompiled, calculateContractAddress, hash, hex, vrs, util };\n\nexport default {\n    createIdentity: createIdentity,\n    publicKey: publicKey,\n    decryptWithPrivateKey: decryptWithPrivateKey,\n    encryptWithPublicKey: encryptWithPublicKey,\n    cipher: cipher,\n    publicKeyByPrivateKey: publicKeyByPrivateKey,\n    recover: recover,\n    recoverPublicKey: recoverPublicKey,\n    sign: sign,\n    signTransaction: signTransaction,\n    txDataByCompiled: txDataByCompiled,\n    calculateContractAddress: calculateContractAddress,\n    hash: hash,\n    hex: hex,\n    vrs: vrs,\n    util: util\n};"]},"metadata":{},"sourceType":"module"}